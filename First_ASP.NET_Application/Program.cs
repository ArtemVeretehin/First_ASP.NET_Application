/*
 Представленный ниже шаблон кода - это MinimalAPI - упрощенная минимизированная модель для запуска веб-приложения в ASP.NET
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello World!");

app.Run();
*/

//Приложение в ASP.NET Core - это объект Microsoft.AspNetCore.Builder.WebApplication
//Для создания объекта WebApplication необходим класс строитель WebApplicationBuilder



//Создание WebApplicationBuilder
var builder = WebApplication.CreateBuilder(args);

//Создание объекта WebApplication
var app = builder.Build();

/*С помощью объекта WebApplication можно настроить всю инфрастуктуру приложения:
- Конфигурацию
- Маршруты
  и т.д.
*/

//По умолчанию для приложения определяется один маршрут c помощью MapGet

//В качестве певого параметра MapGet принимает путь по которому можно обратиться к приложению
// "/" - означает что в качестве пути используется корень веб-приложения (имя домена и порт)
//В качестве второго параметра MapGet принимает обработчик запрос по указанному маршруту в виде функции

app.MapGet("/", () => "Hello World!");

//Запуск приложения
//app.UseWelcomePage();
app.Run();

//await app.StartAsync();
//await Task.Delay(5000);
//await app.StopAsync();
//После этого приложение запустится в виде консоли и можно будет обращаться к нему из различных браузеров

//Подробнее о WebApplicationBuilder
/*
Данный класс выполняет помимо создания веб-приложения следующие функции:
- Установка конфигурации приложения (WebApplicationBuilder.Configuration)
- Добавление сервисов
- Настройка логгирования в приложении
- Установка окружения приложения
- Конфигурация объектов IHostBuilder и IWebHostBuilder, которые применяются для создания хоста приложения
*/
//Получение объекта ConfigurationManager, отвечающего за конфигурацию
ConfigurationManager configManager = builder.Configuration;
//Предоставляет данные об окружении в котором запущено приложение
IWebHostEnvironment environment = builder.Environment;
//Применяется для настройки хоста
IHostBuilder host = builder.Host;
//Применяется для настройки логгирования в приложении
ILoggingBuilder loggingBuilder= builder.Logging;
//Представляет коллекцию сервисов и позволяет добавлять сервисы в приложение
IServiceCollection services = builder.Services;
//Позволяет настроить отдельные настройки сервера
IWebHostBuilder webHost = builder.WebHost;

//Подробнее о WebApplication
/*
Данный класс применяется для управления обработкой запроса, установки маршрутов, получения сервисов
WebApplication применяет три интерфейса:
- IHost: применяется для запуска и остановки хоста, который прослушивает входящие запросы
- IApplicationBuilder: применяется для установки компонентов, которые учавствуют в обработке запроса
- IEndpointRouteBuilder: применяется для установки маршрутов, которые сопоставляются с запросами

Для получения доступа к функционалу приложения можно использовать свойства класса WebApplication
- Configuration - представляет конфигурацию приложения в виде объекта IConfiguration
- Environment - представляет окружение приложения в виде IWebHostEnvironment
- Lifetime - получение уведомлений о событиях жизненного цикла приложения 
- Logger - представляет логгер приложения по умолчанию
- Services - представляет сервисы приложения
- Urls - представляет набор адресов, которые использует сервер

Для управления хостом WebApplicatioin определяет следующие методы:
- Run() - запускает приложение
- RunAsync() - асинхронно запускает приложение
- Start() - запускает приложение
- StartAsync() - запускает приложение
//P.S. после запуска одного из этих методов приложение будет запущено и к нему можно будет обратиться
- StopAsync() - останавливает приложение

При необходимости можно программно остановить выполнение приложения
await app.StartAsync();
await Task.Delay(5000);
await app.StopAsync();
*/

/*
Обработка запросов в ASP.NET реализуется через концепцию конвейера, состоящего из Middleware-компонентов, каждый компонент выполняет свою задачу, после чего передает управление следующему компоненту.
Компонент на котором заканчивается выполнение запроса называется терминальным.
Middleware встраиваются при помощи методов Run,Map,Use интерфейса IApplicationBuilder (WebApplication реализует данный интерфейс)

Каждый компонент middleware может быть определен как:
1. Метод (встроенный inline компонент)
2. Вынесен в отдельный класс

Для создания компонентов middleware используется делегат RequestDelegate, который выполняет некоторое действие и принимает контекст запроса:
public delegate Task RequestDelegate(HttpContext context);

При поступлении запроса сервер формирует на его основе объект HttpCOntext, содержащий всю информацию о запросе
Эта информация через HttpContext передается всем middleware компонентам в приложении

Свойства HttmContext:
- Connection - информация о подключении установленного для данного запроса
- Features - коллекция HTTP - функциональностей, доступных для этого запроса
- Items - получает или устанавливает коллекцию пар ключ-значение для хранения данных запроса
- Request - возвращает объект HttpRequest, который хранит информацию о текущем запроса
- RequestAborted - уведомляет приложение, когда подключение прерывается и соответственно обработка запроса должна быть отменена
- RequestServices - получает или устанавливает объект IServiceProvider, который предоставляет доступ к контейнеру сервисов запроса
- Response - возвращает объект HttpResponse, который позволяет управлять ответом клиенту
- Session - хранит данные сессии для текущего запроса
- TraceIdentifier - представляет уникальный идентификатор запроса для логов трассировки
- User - представляет пользователя, ассоциированного с этим запросом
- WebSockets - возвращает объект для управления подключениями WebSocket для данного запроса
Используя данные свойства можно из компонента middleware получить большую часть необходимых данных о запросе и отправить клиенту ответ

В ASP.NET по умолчанию задан некоторый объем middleware-компонентов
Для встраивания компонентов в конвейер обработки запроса для интерфейса IApplicationBuilder определены методы расширения типа UseXXX,
где XXX это название middleware

 
 */
//Создание терминального middleware компонента
WebApplicationBuilder builder1 = WebApplication.CreateBuilder();
WebApplication app1 = builder1.Build();
app1.Run((HttpContext context) => context.Response.WriteAsync("Hello METANIT.COM"));
app1.Run();